#!/usr/bin/env bash
#
# Copyright 2013-2015 - Ingy döt Net <ingy@ingy.net>
#

# Exit on any errors:
set -e

# Import Bash+ helper functions:
source "${BASH_SOURCE%/*}/git-subrepo.d/bash+.bash"
bash+:import :std can

VERSION=0.2.0

# `git rev-parse` turns this into a getopt parser and a command usage message:
GETOPT_SPEC="\
git subrepo <command> <arguments> <options>

Commands:
  clone     Clone a remote repository into a local sub-directory
  pull      Pull upstream changes to the subrepo
  push      Push local subrepo changes upstream

  fetch     Fetch a subrepo's remote branch (and create a ref for it)
  branch    Create a branch containing the local subrepo commits
  commit    Commit a merged subrepo branch into the mainline

  status    Get status of a subrepo (or all of them)
  clean     Remove branches, remotes and grafts for a subrepo

  help      Documentation for git-subrepo (or specfic command)
  version   Display git-subrepo version info

See 'git help subrepo' for complete documentation and usage of each command.

Options:
--
h           Show the command summary
help        Help overview
version     Print the git-subrepo version number

a,all       Perform command on all current subrepos
b,branch=   Specify an upstream branch
f,force     Force certain operations
F,fetch     Fetch the upstream content first
r,remote=   Specify an upstream remote
u,update    Add the --branch and/or --remote overrides to .gitrepo

q,quiet     Show minimal output
v,verbose   Show verbose output
d,debug     Show the actual commands used
x,DEBUG     Turn on -x Bash debugging
"

#------------------------------------------------------------------------------
# Top level function:
#------------------------------------------------------------------------------
main() {
  # Define global variables:
  local command=                # Subrepo subcommand to run
  local command_arguments=()    # Command args after getopt parsing
  local commit_msg_args=()      # Arguments to show in the commit msg
  local subrepos=()             # List of multiple subrepos
  local quiet_wanted=false      # Output should be quiet
  local verbose_wanted=false    # Output should be verbose
  local debug_wanted=false      # Show debug messages
  local all_wanted=false        # Apply command to all subrepos
  local force_wanted=false      # Force certain operations
  local fetch_wanted=false      # Fetch requested before a command
  local update_wanted=false     # Update .gitrepo with --branch and/or --remote

  local subdir=                 # Subdirectory of the subrepo being used
  local gitrepo=                # Path to .gitrepo file

  local original_head_commit=   # HEAD commit id at start of command
  local original_head_branch=   # HEAD ref at start of command
  local upstream_head_commit=   # HEAD commit id from a subrepo fetch

  local subrepo_remote=         # Remote url for subrepo's upstream repo
  local subrepo_branch=         # Upstream branch to clone/push/pull
  local subrepo_commit=         # Upstream HEAD from previous clone/pull
  local subrepo_parent=         # Local commit from before previous clone/pull
  local subrepo_former=         # A retired gitrepo key that might still exist

  local refs_subrepo_upstream=  # A subrepo ref pointing to upstream head
  local refs_subrepo_pull=      # A subrepo ref pointing to branch after pull

  local override_remote=        # Remote specified with -r
  local override_branch=        # Remote specified with -b

  local FAIL=true               # Flag for RUN: fail on error
  local OUT=false               # Flag for RUN: put output in $output
  local SAY=true                # Flag for RUN: print command for verbose
  local EXEC=false              # Flag for RUN: run subprocess
  local OK=true                 # Flag that commands have succeeded
  local ERR=0                   # Error code
  local INDENT=                 # Verbose indentation

  local git_version=            # Git version in use

  # Check environment and parse CLI options:
  assert-environment-ok

  # Parse and validate command options:
  get-command-options "$@"

  # Make sure repo is in the proper state:
  assert-repo-is-ready

  # Run the command:
  if $all_wanted; then
    local args=( "${command_arguments[@]}" )
    get-all-subrepos
    for subdir in ${subrepos[*]}; do
      subrepo_remote=
      subrepo_branch=
      command_arguments=( "$subdir" "${args[@]}" )
      "command:$command"
    done
  else
    "command:$command"
  fi
}

#------------------------------------------------------------------------------
# API command functions.
#
# Most of these commands call a subrepo:$command function to do the actual
# work. The user facing output is done  (via `say`) is done up here. The
# subrepo:* worker functions are meant to be called interally and don't print
# info to the user.
#------------------------------------------------------------------------------

# `git subrepo clone <url> [<subdir>]` command:
command:clone() {
  command-setup +subrepo_remote subdir:guess-subdir

  # Clone (or reclone) the subrepo into the subdir:
  local reclone_up_to_date=false
  subrepo:clone
  if "$reclone_up_to_date"; then
    say "Subrepo '$subdir' is up to date"
    return
  fi

  # Successful command output:
  local re=
  $force_wanted && re=re
  say "Subrepo '$subrepo_remote' ($subrepo_branch) ${re}cloned into '$subdir'"
}

# `git subrepo pull <subdir>` command:
command:pull() {
  command-setup +subdir

  subrepo:pull
  if OK; then
    say "Subrepo '$subdir' pulled from '$subrepo_remote' ($subrepo_branch)"
    return 0
  elif [[ "$ERR" -eq 1 ]]; then
    say "Subrepo '$subdir' is up to date"
    return 0
  elif [[ "$ERR" -eq 2 ]]; then
    error-pull-rebase
    return "$ERR"
  else
    die "Unknown pull error code: '$ERR'"
  fi
}

# `git subrepo push <subdir>` command:
command:push() {
  local branch=
  command-setup +subdir branch
  subrepo:push
  if OK; then
    say "Subrepo '$subdir' pushed to '$subrepo_remote' ($subrepo_branch)"
    return 0
  else
    error-push-rebase
    return 1
  fi
}

# `git subrepo fetch <subdir>` command
command:fetch() {
  command-setup +subdir
  subrepo:fetch
  say "Fetched '$subrepo_remote' ($subrepo_branch)"
}

# `git subrepo branch <subdir>` command:
command:branch() {
  command-setup +subdir
  if $fetch_wanted; then
    o "Fetch the upstream: $subrepo_remote ($subrepo_branch):"
    CALL subrepo:fetch
  fi

  if $force_wanted; then
    FAIL=false RUN git branch -D "subrepo/$subdir"
  fi

  local branch="subrepo/$subdir"
  if git:branch-exists "$branch"; then
    error "Branch '$branch' already exists. Use '--force' to override."
  fi

  # Create the subrepo branch:
  subrepo:branch
  OK || error \
"Can't create subrepo branch for '$subdir'.
No local subrepo commits since last pull/clone."

  say "Created branch 'subrepo/$subdir'"
}

# `git subrepo commit <subdir>` command
command:commit() {
  command-setup +subdir subrepo_commit_ref

  # Get the upstream head associated with the commit:
  {
    # XXX We need the fetch ref used for the rebase. This needs to be preserved
    # better, since it could change between the rebase and the commit.
    git:rev-exists "$refs_subrepo_upstream" ||
      error "Can't find ref '$refs_subrepo_upstream'."
    upstream_head_commit="$(git rev-parse "$refs_subrepo_upstream")"
  }

  [ -n "$subrepo_commit_ref" ] ||
    subrepo_commit_ref="subrepo/$subdir"
  subrepo:commit

  say "Content of subrepo '$subrepo_commit_ref' committed as"
  say "subdir '$subdir/' to branch '$original_head_branch'."
}

# `git subrepo status [<subdir>]` command:
command:status() {
  if [ ${#command_arguments[@]} -eq 0 ]; then
    get-all-subrepos
    local count=${#subrepos[@]}
    if ! "$quiet_wanted"; then
      if [ $count -eq 0 ]; then
        echo "No subrepos."
        exit 1
      else
        local s=
        [ "$count" == 1 ] || s=s
        echo "$count subrepo$s:"
        echo
      fi
    fi
  else
    subrepos=("${command_arguments[@]}")
  fi
  for subdir in "${subrepos[@]}"; do
    subdir="${subdir#./}"
    subdir="${subdir%/}"

    if [ ! -f "$subdir/.gitrepo" ]; then
      echo "'$subdir' is not a subrepo"
      echo
      continue
    fi

    subrepo_remote=
    subrepo_branch=
    read-gitrepo-file
    if $fetch_wanted; then
      subrepo:fetch
    fi

    if $quiet_wanted; then
      echo "$subdir"
      continue
    fi

    cat <<...
Git subrepo '$subdir':
...

    git:branch-exists "subrepo/$subdir" && cat <<...
  Subrepo Branch:  subrepo/$subdir
...

    local remote="subrepo/$subdir"
    FAIL=false OUT=true RUN git config "remote.$remote.url"
    [ -z "$output" ] || cat <<...
  Remote Name:     subrepo/$subdir
...

    cat <<...
  Remote URL:      $subrepo_remote
...

    git:ref-exists "$refs_subrepo_upstream" && cat <<...
  Upstream Ref:    $refs_subrepo_upstream
...

    cat <<...
  Tracking Branch: $subrepo_branch
...

    [ -z "$subrepo_commit" ] || cat <<...
  Pulled Commit:   $(git rev-parse --short $subrepo_commit)
...

    if [ -n "$subrepo_parent" ]; then
      cat <<...
  Pull Parent:     $(git rev-parse --short $subrepo_parent)
...

    # TODO Remove this eventually:
    elif [ -n "$subrepo_former" ]; then
      cat <<...
  Former Commit:   $(git rev-parse --short $subrepo_former) *** DEPRECATED ***
...
    fi
    echo
  done
}

# `git subrepo clean <subdir>` command
command:clean() {
  command-setup +subdir
  local clean_list=()
  subrepo:clean
  for item in "${clean_list[@]}"; do
    say "Removed $item."
  done
}

# Launch the manpage viewer:
command:help() {
  exec git help subrepo
}

# Print version info.
# TODO: Add short commit id after version.
#       Will need to get it from repo or make install can put it somewhere.
command:version() {
  cat <<...
git-subrepo Version: $VERSION
Copyright 2013-2015 Ingy döt Net
https://github.com/git-commands/git-subrepo
$BASH_SOURCE
Git Version: $git_version

...
  :
}

#------------------------------------------------------------------------------
# Subrepo command worker functions.
#------------------------------------------------------------------------------

# Clone by fetching remote content into our subdir:
subrepo:clone() {
  re="$1"

  # Turn off force unless really a reclone:
  if $force_wanted && [ ! -f "$gitrepo" ]; then
    force_wanted=false
  fi

  if $force_wanted; then
    o "--force indicates a reclone."
    o "Fetch the upstream: $subrepo_remote ($subrepo_branch):"
    CALL subrepo:fetch
    read-gitrepo-file
    o "Check if we already are up to date."
    if [ "$upstream_head_commit" == "$subrepo_commit" ]; then
      reclone_up_to_date=true
      return
    fi
    o "Remove the old subdir."
    RUN git rm -r "$subdir"
  else
    assert-subdir-empty
    if [ -z "$subrepo_branch" ]; then
      o "Determine the upstream head branch."
      get-upstream-head-branch
      subrepo_branch="$output"
    fi
    o "Fetch the upstream: $subrepo_remote ($subrepo_branch):"
    CALL subrepo:fetch
  fi

  o "Make the directory '$subdir/' for the clone."
  RUN mkdir -p "$subdir"

  o "Commit the new '$subdir/' content:"
  subrepo_commit_ref="$upstream_head_commit"
  CALL subrepo:commit
}

# Properly merge a local subrepo branch with upstream and commit to mainline:
subrepo:pull() {
  o "Fetch the upstream: $subrepo_remote ($subrepo_branch):"
  CALL subrepo:fetch

  # Check if we already are up to date:
  if [ "$upstream_head_commit" == "$subrepo_commit" ]; then
    OK=false; ERR=1; return
  fi

  local branch_name="subrepo/$subdir"
  if git:branch-exists "$branch_name"; then
    o "Deleting old '$branch_name' branch."
    RUN git branch -D "$branch_name"
  fi
  o "Create subrepo branch '$branch_name':"
  CALL subrepo:branch
  if OK; then
    o "git rebase $upstream_ref $branch_name"
    FAIL=false OUT=true RUN git rebase "$refs_subrepo_upstream" "$branch_name"
    if ! OK; then
      o "The rebase command failed:"$'\n'----$'\n'"$output"$'\n'----
      OK=false; ERR=2; return
    fi
    o "Checkout '$original_head_branch'."
    git checkout --quiet "$original_head_branch"
  else
    o "Subrepo branch failed. No local subrepo commits to merge."
    o "Create branch '$branch_name' from the fetched upstream instead."
    RUN git branch "$branch_name" "$refs_subrepo_upstream"
  fi

  o "Commit the new '$subdir/' content:"
  subrepo_commit_ref="$branch_name"
  CALL subrepo:commit

  o "Remove fetched upstream ref '$refs_subrepo_upstream'."
  RUN git update-ref -d "$refs_subrepo_upstream"

  o "Create ref '$refs_subrepo_pull' for branch '$branch_name'."
  RUN git update-ref "$refs_subrepo_upstream" "$branch_name"
}

# Push a properly merged subrepo branch upstream:
subrepo:push() {
  if [ -z "$branch" ]; then
    branch="subrepo-push/$subdir"
    if git:branch-exists "$branch"; then
      error "There is a previous push branch '$branch'. Delete it first."
    fi
    o "Create subrepo branch '$branch':"
    CALL subrepo:branch "$branch"
    if ! OK; then
      error "There is nothing new to push."
    fi
    o "Fetch the upstream: $subrepo_remote ($subrepo_branch):"
    CALL subrepo:fetch
    o "git rebase $refs_subrepo_upstream $branch"
    FAIL=false OUT=true RUN git rebase "$refs_subrepo_upstream" "$branch"
    if ! OK; then
      o "The rebase command failed:"$'\n'----$'\n'"$output"$'\n'----
      OK=false; ERR=2; return
    fi
    RUN git checkout "$original_head_branch"
  else
    if ! git:rev-exists "$branch"; then
      error "'$branch' is not a valid commit."
    fi
  fi

  o "Make sure that '$branch' exists."
  git:branch-exists "$branch" ||
    error "No subrepo branch '$branch' to push."

  if ! "$force_wanted"; then
    o "Make sure '$branch' contains the '$refs_subrepo_upstream' HEAD."
    if ! git:commit-in-rev-list "$upstream_head_commit" "$branch"; then
      error "Can't commit: '$branch' doesn't contain upstream HEAD."
    fi
  fi

  local force=
  "$force_wanted" && force=--force

  o "Push branch '$branch' to '$subrepo_remote' ($subrepo_branch)."
  RUN git push $force "$subrepo_remote" "$branch":"$subrepo_branch"

  if [ "$branch" == "subrepo-push/$subdir" ]; then
    o "Remove branch '$branch' and ref '$refs_subrepo_upstream'"
    RUN git branch -D "$branch"
    RUN git update-ref -d "$refs_subrepo_upstream"
  fi
}

# Fetch the subrepo's remote branch content:
subrepo:fetch() {
  o "Fetch '$subrepo_remote' ($subrepo_branch)"
  RUN git fetch --quiet "$subrepo_remote" "$subrepo_branch"

  o "Get the remote subrepo HEAD commit."
  OUT=true RUN git rev-parse FETCH_HEAD
  upstream_head_commit="$output"

  local output=$(git config "remote.subrepo/$subdir.url")
  if [ -z "$output" ]; then
    o "Create subrepo remote 'subrepo/$subdir' -> '$subrepo_remote'."
    RUN git remote add "subrepo/$subdir" "$subrepo_remote"
  else
    if [ "$output" != "$subrepo_remote" ]; then
      o "Change subrepo remote 'subrepo/$subdir' -> '$subrepo_remote'."
      git remote set-url "subrepo/$subdir" "$subrepo_remote"
    fi
  fi

  o "Create ref '$refs_subrepo_upstream'."
  RUN git update-ref "$refs_subrepo_upstream" "$upstream_head_commit"
}

# Create a subrepo branch of changes since last pull:
subrepo:branch() {
  local branch="${1:-"subrepo/$subdir"}"
  o "Check if the '$branch' branch already exists."
  git:branch-exists "$branch" && return

  o "Make sure there is at least one commit after the last pull."
  # (That translates to 2 commits after the parent of last pull):
  local count="$(git rev-list "$subrepo_parent"..HEAD -2 | grep -c $'\n')"
  if [ "$count" != 2 ]; then
    OK=false
    return
  fi

  o "Remove the commits before last pull."
  FAIL=false RUN git filter-branch --force \
    --parent-filter "grep -v $subrepo_parent || true" \
    -- "$subrepo_parent"..HEAD

  # Note: We need to have the last pull commit or this next step can fail.
  o "Get commits specific to the subdir."
  FAIL=false RUN git filter-branch -f \
    --subdirectory-filter "$subdir" \
    HEAD

  o "Make sure there are *subrepo* commits after the last pull."
  local count="$(git rev-list HEAD -2 | grep -c $'\n')"
  if [ "$count" != 2 ]; then
    # Reset to the branch where we started:
    RUN git reset --hard "$original_head_commit"
    OK=false
    return
  fi

  # Now we can get rid of the previous pull commit.
  # First get the final commit, which is the last pull one:
  local prev_pull_commit="$(git rev-list HEAD | tail -1)"
  [ -n "$prev_pull_commit" ] ||
    die "Can't find previous clone/pull commit."

  o "Remove the previous pull commit."
  FAIL=false RUN git filter-branch --force \
    --parent-filter "grep -v $prev_pull_commit || true" \
    -- "$prev_pull_commit"..HEAD

  o "Remove the .gitrepo file from the history."
  RUN git filter-branch -f \
    --tree-filter "rm -f .gitrepo"

  o "Create branch '$branch' for this new commit set."
  RUN git branch "$branch"

  o "Reset to the '$original_head_branch' branch."
  RUN git reset --hard "$original_head_commit"
}

# Commit a merged subrepo branch:
subrepo:commit() {
  o "Check that '$subrepo_commit_ref' exists"
  git:rev-exists "$subrepo_commit_ref" ||
    error "Commit ref '$subrepo_commit_ref' does not exist."

  if ! "$force_wanted"; then
    local upstream="$upstream_head_commit"
    o "Make sure '$subrepo_commit_ref' contains the '$upstream' HEAD."
    if ! git:commit-in-rev-list "$upstream" "$subrepo_commit_ref"; then
      error \
        "Can't commit: '$subrepo_commit_ref' doesn't contain upstream HEAD."
    fi
  fi

  o "Remove old content of the subdir."
  (
    cd "./$subdir"
    RUN rm -fr $(ls -A)
  )

  o "Put remote subrepo content into '$subdir/'."
  GIT_WORK_TREE="$subdir" RUN git reset --hard "$subrepo_commit_ref"

  o "Reset index to original commit"
  RUN git reset --mixed "$original_head_commit"

  o "Put info into '$subdir/.gitrepo' file."
  update-gitrepo-file

  o "Add '$subdir/' content to the index."
  RUN git add -A "$subdir"

  o "Commit to the '$original_head_branch' branch."
  RUN git commit -m "$(get-commit-message)"
}

subrepo:clean() {
  # Remove subrepo branch if exists:
  local ref="refs/heads/subrepo/$subdir"
  local branch="subrepo/$subdir"
  if [ -e ".git/$ref" ]; then
    o "Remove branch '$branch'."
    RUN git update-ref -d "$ref"
    clean_list+=("branch '$branch'")
  fi

  local remote="subrepo/$subdir"
  FAIL=false OUT=true RUN git config "remote.$remote.url"
  if [ -n "$output" ]; then
    o "Remove remote '$remote'."
    RUN git remote rm "$remote"
    clean_list+=("remote '$remote'")
  fi

  if "$force_wanted"; then
    o "Remove all subrepo refs."
    if "$all_wanted"; then
      RUN rm -fr .git/refs/subrepo/
    else
      RUN rm -fr .git/refs/subrepo/$subdir/
    fi
  fi
}

#------------------------------------------------------------------------------
# Support functions:
#------------------------------------------------------------------------------

# TODO:
# Collect original options and arguments into an array for commit message
#   They should be normalized and pruned

# Parse command line options:
get-command-options() {
  [ $# -eq 0 ] && set -- --help

  [ -n "$GIT_SUBREPO_DEBUG" ] && set -x
  [ -n "$GIT_SUBREPO_QUIET" ] && quiet_wanted=true
  [ -n "$GIT_SUBREPO_VERBOSE" ] && verbose_wanted=true
  [ -n "$GIT_SUBREPO_DEBUG" ] && debug_wanted=true

  eval "$(
    echo "$GETOPT_SPEC" |
      git rev-parse --parseopt -- "$@" ||
    echo exit $?
  )"

  while [ $# -gt 0 ]; do
    local option="$1"; shift
    case "$option" in
      --) break ;;
      -a) all_wanted=true ;;
      -b) subrepo_branch="$1"
          override_branch="$1"
          commit_msg_args+=("--branch=$1")
          shift ;;
      -f) force_wanted=true
          commit_msg_args+=("--force") ;;
      -F) fetch_wanted=true ;;
      -r) subrepo_remote="$1"
          override_remote="$1"
          commit_msg_args+=("--remote=$1")
          shift ;;
      -u) update_wanted=true
          commit_msg_args+=("--update") ;;
      -q) quiet_wanted=true ;;
      -v) verbose_wanted=true ;;
      -d) debug_wanted=true ;;
      -x) set -x ;;
      --version)
        echo "$VERSION"
        exit ;;
      *) error "Unexpected option: $option" ;;
    esac
  done

  # Set subrepo command:
  command="$1"; shift

  # Make sure command exists:
  can "command:$command" ||
    error "'$command' is not a command. See 'git subrepo help'."

  command_arguments=("$@")
  commit_msg_args+=("$@")

  if $all_wanted; then
    check_option all
  fi
  if $force_wanted; then
    check_option force
  fi
  if $fetch_wanted; then
    check_option fetch
  fi
  if [ -n "$override_branch" ]; then
    check_option branch
  fi
  if [ -n "$override_remote" ]; then
    check_option remote
  fi
  if $update_wanted; then
    check_option update
    if [ -z "$subrepo_branch" -o -z "$subrepo_remote" ]; then
      error "Can't use '--update' without '--branch' or '--remote'."
    fi
  fi
}

options_branch='all fetch force'
options_clean='all force'
options_clone='branch force'
options_commit='force'
options_fetch='all branch remote'
options_pull='all branch remote update'
options_push='all branch force remote update'
options_status='fetch'
check_option() {
  local var="options_$command"
  [[ ${!var} =~ $1 ]] ||
    error "Invalid option '--$1' for '$command'."
}

#------------------------------------------------------------------------------
# Command argument validation:
#------------------------------------------------------------------------------

# Do the setup steps needed by most of the subrepo subcommands:
command-setup() {
  get-params "$@"

  # Sanity check subdir:
  [ -n "$subdir" ] ||
    die "subdir not set"
  [[ "$subdir" =~ ^/ ]] &&
    error "The subdir '$subdir' should not be absolute path."
  subdir="${subdir#./}"
  subdir="${subdir%/}"

  # Set refs_ variables:
  refs_subrepo_upstream="refs/subrepo/$subdir/upstream"
  refs_subrepo_pull="refs/subrepo/$subdir/pull"

  # Read/parse the .gitrepo file (unless clone; doesn't exist yet)
  gitrepo="$subdir/.gitrepo"
  if [ "$command" != "clone" ]; then
    read-gitrepo-file
  fi

  true
}

# Parse command line args according to a simple dsl spec:
get-params() {
  local i=0
  local num=${#command_arguments[@]}
  for arg in $@; do
    # If arg starts with '+' then it is required
    if [[ "$arg" =~ ^\+ ]]; then
      if [ $i -ge $num ]; then
        error "Command '$command' requires arg '${arg#+}'."
      fi
      printf -v ${arg#+} "${command_arguments[i]}"
    # Look for function name after ':' to provide a default value
    else
      if [ $i -lt $num ]; then
        printf -v ${arg%:*} "${command_arguments[i]}"
      elif [[ "$arg" =~ : ]]; then
        "${arg#*:}"
      fi
    fi
    let i=$((i+1))
  done

  # Check for extra arguments:
  if [ $num -gt $i ]; then
    set -- ${command_arguments[@]}
    for ((j = 1; j <= i; j++)); do shift; done
    error "Unknown argument(s) '$*' for '$command' command."
  fi
}

# Determine the correct subdir path to use:
guess-subdir() {
  local dir="$subrepo_remote"
  dir="${dir%.git}"
  dir="${dir%/}"
  dir="${dir##*/}"
  [[ "$dir" =~ ^[-a-zA-Z0-9]+$ ]] ||
    error "Can't determine subdir from '$subrepo_remote'."
  subdir="$dir"
}

#------------------------------------------------------------------------------
# State file (`.gitrepo`) functions:
#------------------------------------------------------------------------------

# Set subdir and gitrepo vars:
read-gitrepo-file() {
  gitrepo="$subdir/.gitrepo"

  if [ ! -f "$gitrepo" ]; then
    error "'$subdir' is not a subrepo."
  fi

  # Read .gitrepo values:
  if [ -z "$subrepo_remote" ]; then
    SAY=false OUT=true RUN git config --file="$gitrepo" subrepo.remote
    subrepo_remote="$output"
  fi

  if [ -z "$subrepo_branch" ]; then
    SAY=false OUT=true RUN git config --file="$gitrepo" subrepo.branch
    subrepo_branch="$output"
  fi

  SAY=false OUT=true RUN git config --file="$gitrepo" subrepo.commit
  subrepo_commit="$output"

  FAIL=false \
  SAY=false OUT=true RUN git config --file="$gitrepo" subrepo.parent
  subrepo_parent="$output"

  if [ -z "$subrepo_parent" ]; then
    SAY=false OUT=true RUN git config --file="$gitrepo" subrepo.former
    subrepo_former="$output"
  fi
}

# Update the subdir/.gitrepo state file:
update-gitrepo-file() {
  local short_commit=

  local newfile=false
  [ ! -e "$gitrepo" ] &&
    newfile=true

  $newfile && cat <<... > "$gitrepo"
; DO NOT EDIT (unless you know what you are doing)
;
; This subdirectory is a git "subrepo", and this file is maintained by the
; git-subrepo command. See https://github.com/git-commands/git-subrepo#readme
;
...

  # TODO: only update remote and branch if supplied and $update_wanted
  if $newfile || [ $update_wanted -a -n "$override_remote" ]; then
    RUN git config --file="$gitrepo" subrepo.remote "$subrepo_remote"
  fi

  if $newfile || [ $update_wanted -a -n "$override_branch" ]; then
    RUN git config --file="$gitrepo" subrepo.branch "$subrepo_branch"
  fi

  RUN git config --file="$gitrepo" subrepo.commit "$upstream_head_commit"
  RUN git config --file="$gitrepo" subrepo.parent "$original_head_commit"
  RUN git config --file="$gitrepo" subrepo.cmdver "$VERSION"
}

#------------------------------------------------------------------------------
# Enviroment checks:
#------------------------------------------------------------------------------

# Check that system is ok for this command:
assert-environment-ok() {
  type git &> /dev/null ||
    error "Can't find your 'git' command in '$PATH'."
  git_version="$(git --version)"
  if [[ "$git_version" < "git version 1.7" ]]; then
    error "Requires git version 1.7 or higher; you have '$git_version'."
  fi
}

# Make sure git repo is ready:
assert-repo-is-ready() {
  # Skip this for trivial info commands:
  [[ "$command" =~ ^(help|version)$ ]] && return

  # We must be inside a git repo:
  git rev-parse --git-dir &> /dev/null ||
    error "Not inside a git repository."

  # Get the original branch and commit:
  git:get-head-branch-name
  original_head_branch="$output"
  git:get-head-branch-commit
  original_head_commit="$output"

  # If a subrepo branch is currently checked out, then note it:
  if [[ "$original_head_branch" =~ ^subrepo/(.*) ]]; then
    error "Can't '$command' while subrepo branch is checked out."
  fi

  # Make sure we are on a branch:
  [ "$original_head_branch" == HEAD -o -z "$original_head_branch" ] &&
    error "Must be on a branch to run this command."

  # In a work-tree:
  SAY=false OUT=true RUN git rev-parse --is-inside-work-tree
  [ "$output" == true ] ||
    error "Can't 'subrepo $command' outside a working tree."

  # HEAD exists:
  RUN git rev-parse --verify HEAD

  # Repo is in a clean state:
  if [[ "$command" =~ ^(clone|pull|push)$ ]]; then
    git update-index -q --ignore-submodules --refresh
    git diff-files --quiet --ignore-submodules ||
      error "Can't $command subrepo. Unstaged changes."
    git diff-index --quiet --ignore-submodules HEAD ||
      error "Can't $command subrepo. Working tree has changes."
    git diff-index --quiet --cached --ignore-submodules HEAD ||
      error "Can't $command subrepo. Index has changes."
  fi

  # For now, only support actions from top of repo:
  if [ "$(git rev-parse --git-dir)" != '.git' ]; then
    error "Need to run subrepo command from top level directory of the repo."
  fi
}

# If subdir exists, make sure it is empty:
assert-subdir-empty() {
  if [ -e "$subdir" ] && [ -n "$(ls -A $subdir)" ]; then
    error "The subdir '$subdir' exists and is not empty."
  fi
}

#------------------------------------------------------------------------------
# Getters of various information:
#------------------------------------------------------------------------------

# Find all the current subrepos by looking for all the subdirectories that
# contain a `.gitrepo` file.
get-all-subrepos() {
  local paths=($(
    find . -name '.gitrepo' |
      grep -v '/.git/' |
      grep '/.gitrepo$' |
      sed 's/.gitrepo$//' |
      sort
  ))
  subrepos=()
  local path
  for path in "${paths[@]}"; do
    add-subrepo "$path"
  done
}

add-subrepo() {
  for path in "${subrepos[@]}"; do
    [[ "$1" =~ ^$path ]] && return
  done
  subrepos+=("$1")
}

# Determine the upstream's default head branch:
get-upstream-head-branch() {
  OUT=true RUN git ls-remote $subrepo_remote
  local remotes="$output"
  [ -n "$remotes" ] ||
    error "Failed to 'git ls-remote $subrepo_remote'."
  local commit="$(
    echo "$remotes" |
    grep HEAD |
    cut -f1
  )"
  local branch="$(
    echo "$remotes" |
    grep "$commit" |
    grep -v HEAD |
    head -n1 |
    cut -f2
  )"
  [[ "$branch" =~ refs/heads/ ]] ||
    error "Problem finding remote default head branch."
  output="${branch#refs/heads/}"
}

# Commit msg for an action commit:
get-commit-message() {
  local commit="$(git rev-parse --short "$upstream_head_commit")"
  local args=()
  if $all_wanted; then
    args+=("$subdir")
  fi
  args+=(${commit_msg_args[@]})

  # Find the specific git-subrepo code used:
  local command_remote='???'
  local command_commit='???'
  get-command-info

  # Format subrepo commit message:
  cat <<...
git subrepo $command ${args[@]}

subrepo:    "$subdir"
upstream:
  origin:   "$subrepo_remote"
  branch:   "$subrepo_branch"
  commit:   "$commit"
git-subrepo:
  version:  "$VERSION"
  origin:   "$command_remote"
  commit:   "$command_commit"
...
}

# Get location and version info about the git-subrepo command itself. This
# info goes into commit messages, so we can find out exactly how the commits
# were done.
get-command-info() {
  local bin="$0"
  if [[ "$bin" =~ / ]]; then
    local lib="$(dirname "$bin")"
    # XXX Makefile needs to install these symlinks:
    # If `git-subrepo` was system-installed (`make install`):
    if [ -e "$lib/git-subrepo.d/upstream" ] &&
       [ -e "$lib/git-subrepo.d/commit" ]; then
      command_remote=$(readlink "$lib/git-subrepo.d/upstream")
      command_commit=$(readlink "$lib/git-subrepo.d/commit")
    elif [[ "$lib" =~ / ]]; then
      lib="$(dirname "$lib")"
      if [ -d "$lib/.git" ]; then
        local remote="$(
          GIT_DIR=$lib/.git git remote -v |
            grep '^origin' |
            head -n1 |
            cut -f2 |
            cut -d ' ' -f1
        )"
        if [ -n "$remote" ]; then
          command_remote="$remote"
        else
          local remote="$(
            GIT_DIR=$lib/.git git remote -v |
              head -n1 |
              cut -f2 |
              cut -d ' ' -f1
          )"
          if [ -n "$remote" ]; then
            command_remote="$remote"
          fi
        fi
        local commit="$(GIT_DIR="$lib/.git" git rev-parse --short HEAD)"
        if [ -n "$commit" ]; then
          command_commit="$commit"
        fi
      fi
    fi
  fi
}

#------------------------------------------------------------------------------
# Instructional errors:
#------------------------------------------------------------------------------
error-pull-rebase() {
  cat <<...
The 'git rebase' command failed during your pull.
You will need to finish the pull by hand. Follow these steps:

  # Resolve the rebase conflicts
  git checkout $original_head_branch
  git subrepo commit $subdir

...
  error-reset-message pull
}

error-push-rebase() {
  cat <<...
The 'git rebase' command failed during your push.
You will need to finish the push by hand. Follow these steps:

  # Resolve the rebase conflicts
  git checkout $original_head_branch
  git subrepo push $subdir subrepo-push/$subdir

...
  error-reset-message push
}

error-reset-message() {
  cat <<...
To abort the $1 and reset back to where you started:

  git rebase --abort
  git checkout ORIG_HEAD
  git subrepo clean $subdir

See 'git help subrepo' for more help.

...
}

#------------------------------------------------------------------------------
# Git command wrappers:
#------------------------------------------------------------------------------

git:branch-exists() {
  git:rev-exists "refs/heads/$1"
}

git:rev-exists() {
  git rev-list "$1" -1 &> /dev/null
}

git:ref-exists() {
  test -n "$(git for-each-ref "$1")"
}

git:get-head-branch-name() {
  output=
  local name="$(git rev-parse --abbrev-ref HEAD)"
  [ "$name" == HEAD ] && return
  output="$name"
}

git:get-head-branch-commit() {
  output="$(git rev-parse HEAD)"
}

git:commit-in-rev-list() {
  local commit="$1"
  local list_head="$2"
  git rev-list "$list_head" | grep -q "^$commit"
}

#------------------------------------------------------------------------------
# Low level sugar commands:
#------------------------------------------------------------------------------

# Smart command runner:
RUN() {
  $debug_wanted && $SAY && say '>>>' $*
  if $EXEC; then
    "$@"
    return $?
  fi

  OK=true
  set +e
  local rc=
  local out=
  if $debug_wanted; then
    out="$("$@")"
  else
    if $OUT; then
      out="$("$@" 2>/dev/null)"
    else
      out="$("$@" 2>&1)"
    fi
  fi
  rc=$?
  set -e

  if [ "$rc" -ne 0 ]; then
    OK=false
    $FAIL && error "Command failed: '$*'."
  fi
  if $OUT; then
    output="$out"
  fi
}

# Call a function with indent increased:
CALL() {
  local INDENT="  $INDENT"
  "$@"
}

# Print verbose steps for commands with steps:
o() {
  if $verbose_wanted; then
    echo "$INDENT* $@"
  fi
}

# Print unless quiet mode:
say() {
  $quiet_wanted || echo "$@"
}

# Print to stderr:
err() {
  echo "$@" >&2
}

# Check if OK:
OK() {
  $OK
}

# Nicely report common error messages:
error() {
  local msg=
  printf -v msg "git-subrepo: %s\n" "$1"
  die "$msg"
}

# Start at the end:
[ "$BASH_SOURCE" != "$0" ] || main "$@"

# vim: set ft=sh sw=2 lisp:
