.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "README 1"
.TH README 1 "2014-09-14" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Name"
.IX Header "Name"
\&\fIgit\-subrepo\fR\|(1) \- Git Submodule Alternative
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 1
\&    git subrepo help
\&
\&    git subrepo clone <remote\-url>
\&    git subrepo pull <subdir>
\&    git subrepo push <subdir>
\&    git subrepo branch <subdir>
\&    git subrepo checkout <subdir>
\&
\&    git subrepo status <subdir>
\&    git subrepo fetch \-\-all
\&    git subrepo clean \-a
\&
\&    git subrepo version
.Ve
.SH "Description"
.IX Header "Description"
This git command \*(L"clones\*(R" an external git repo into a subdirectory of your
repo. Later on, upstream changes can be pulled in, and local changes can be
pushed back. Simple.
.SH "Benefits"
.IX Header "Benefits"
This command is an improvement from \f(CW\*(C`git\-submodule\*(C'\fR and \f(CW\*(C`git\-subtree\*(C'\fR; two
other git commands with similar goals, but various problems.
.PP
It assumes there are 3 main roles of people interacting with a repo, and
attempts to serve them all well:
.IP "\(bu" 4
owner \- The person who authors\fIowns\fRmaintains a repo.
.IP "\(bu" 4
users \- People who are just using/installing the repo.
.IP "\(bu" 4
collaborators \- People who commit code to the repo and subrepos.
.PP
The \f(CW\*(C`git\-subrepo\*(C'\fR command benefits these roles in the following ways:
.IP "\(bu" 4
Simple and intuitive commandline usage.
.IP "\(bu" 4
Users get your repo and all your subrepos just by cloning your repo.
.IP "\(bu" 4
Users do not need to install git-subrepo, ever.
.IP "\(bu" 4
Collaborators do not need to install unless they want to push/pull.
.IP "\(bu" 4
Collaborators know when a subdir is a subrepo (it has a \f(CW\*(C`.gitrepo\*(C'\fR file).
.IP "\(bu" 4
Well named branches and remotes are generated for manual operations.
.IP "\(bu" 4
Owners do not deal with the complications of keeping submodules in sync.
.IP "\(bu" 4
Subrepos can contain other subrepos.
.IP "\(bu" 4
Branching with subrepos just works.
.IP "\(bu" 4
Different branches can have different subrepos in different states, etc.
.IP "\(bu" 4
Moving/renaming a subrepo subdir just works.
.IP "\(bu" 4
Your git history is kept squeaky clean.
.IP "\(bu" 4
Upstream history (clone/pull) is condensed into a single commit.
.IP "\(bu" 4
You can see the complete subrepo history by using a subrepo remote branch.
.IP "\(bu" 4
Commits pushed back upstream are \s-1NOT\s0 condensed.
.IP "\(bu" 4
Easy to play around with subrepos and then reset back.
.IP "\(bu" 4
Does not introduce history that messes up other git commands.
.IP "\(bu" 4
Fixes known rebase failures with \f(CW\*(C`git\-subtree\*(C'\fR.
.SH "Installation"
.IX Header "Installation"
There are currently 3 ways to install \f(CW\*(C`git\-subrepo\*(C'\fR. For all of them you need
to get the source code from GitHub:
.PP
.Vb 1
\&    git clone https://github.com/ingydotnet/git\-subrepo /path/to/git\-subrepo
.Ve
.PP
The first installation method is preferred: \f(CW\*(C`source\*(C'\fR the \f(CW\*(C`init\*(C'\fR file. Just
add a line like this one to your shell startup script:
.PP
.Vb 1
\&    source /path/to/git\-subrepo/init
.Ve
.PP
That will modify your \f(CW\*(C`PATH\*(C'\fR and \f(CW\*(C`MANPATH\*(C'\fR, and also enable command
completion.
.PP
The second method is to do these things by hand. This might afford you more
control of your shell environment. Simply add the \f(CW\*(C`lib\*(C'\fR and \f(CW\*(C`man\*(C'\fR
directories to your \f(CW\*(C`PATH\*(C'\fR and \f(CW\*(C`MANPATH\*(C'\fR:
.PP
.Vb 2
\&    export PATH="/path/to/git\-subrepo/lib:$PATH"
\&    export MANPATH="/path/to/git\-subrepo/man:$MANPATH"
.Ve
.PP
See below for info on how to turn on Command Completion.
.PP
The third method is a standard system install, which puts \f(CW\*(C`git\-subrepo\*(C'\fR next
to your other git commands, do this instead:
.PP
.Vb 1
\&    make install        # Possibly with \*(Aqsudo\*(Aq
.Ve
.PP
This method does not account for upgrading and command completion yet.
.SH "Upgrading"
.IX Header "Upgrading"
If you used the \f(CW\*(C`PATH\*(C'\fR method of installation, just run this to upgrade
\&\f(CW\*(C`git\-subrepo\*(C'\fR:
.PP
.Vb 1
\&    git subrepo upgrade
.Ve
.PP
Or (same thing):
.PP
.Vb 2
\&    cd /path/to/git\-subrepo
\&    git pull
.Ve
.PP
If you used \f(CW\*(C`make install\*(C'\fR method, then run this again (after \f(CW\*(C`git pull\*(C'\fR):
.PP
.Vb 1
\&    make install        # Possibly with \*(Aqsudo\*(Aq
.Ve
.SH "Command Completion"
.IX Header "Command Completion"
The \f(CW\*(C`git subrepo\*(C'\fR command supports \f(CW\*(C`<TAB>\*(C'\fR\-based command completion. If
you don’t use the \f(CW\*(C`init\*(C'\fR script (see Installation, above), you’ll need to
enable this manually to use it.
.SS "In Bash"
.IX Subsection "In Bash"
If your Bash setup does not already provide command completion for Git, you’ll
need to enable that first:
.PP
.Vb 1
\&    source <Git completion script>
.Ve
.PP
On your system, the Git completion script might be found at any of the
following locations (or somewhere else that we don’t know about):
.IP "\(bu" 4
\&\f(CW\*(C`/etc/bash_completion.d/git\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`/usr/share/bash\-completion/git\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`/usr/share/bash\-completion/completions/git\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`/opt/local/share/bash\-completion/completions/git\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`/usr/local/etc/bash_completion.d/git\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`~/.homebrew/etc/bash_completion.d/git\*(C'\fR
.PP
In case you can’t find any of these, this repository contains a copy of the
Git completion script:
.PP
.Vb 1
\&    source /path/to/git\-subrepo/share/git\-completion.bash
.Ve
.PP
Once Git completion is enabled (whether you needed to do that manually or
not), you can turn on \f(CW\*(C`git\-subrepo\*(C'\fR completion with a command like this:
.PP
.Vb 1
\&    source /path/to/git\-subrepo/share/completion.bash
.Ve
.SS "In zsh"
.IX Subsection "In zsh"
In the Z shell (zsh), you can manually enable \f(CW\*(C`git\-subrepo\*(C'\fR completion by
adding the following line to your \f(CW\*(C`~/.zshrc\*(C'\fR, \fBbefore\fR the \f(CW\*(C`compinit\*(C'\fR
function is called:
.PP
.Vb 1
\&    fpath=(\*(Aq/path/to/git\-subrepo/share/zsh\-completion\*(Aq $fpath)
.Ve
.SH "Command Options"
.IX Header "Command Options"
.ie n .IP """\-h""" 4
.el .IP "\f(CW\-h\fR" 4
.IX Item "-h"
Short help.
.ie n .IP """\-\-help""" 4
.el .IP "\f(CW\-\-help\fR" 4
.IX Item "--help"
Long help.
.ie n .IP """\-a"", ""\-\-all""" 4
.el .IP "\f(CW\-a\fR, \f(CW\-\-all\fR" 4
.IX Item "-a, --all"
If you have multiple subrepos, issue the command to all of them (if
applicable).
.ie n .IP """\-\-branch=<branch\-name>"" (""\-b <branch\-name>"")" 4
.el .IP "\f(CW\-\-branch=<branch\-name>\fR (\f(CW\-b <branch\-name>\fR)" 4
.IX Item "--branch=<branch-name> (-b <branch-name>)"
Use a different branch-name than the remote \s-1HEAD\s0 or the one saved in
\&\f(CW\*(C`.gitrepo\*(C'\fR locally.
.ie n .IP """\-\-remote=<remote\-url>"" (""\-r <remote\-url>"")" 4
.el .IP "\f(CW\-\-remote=<remote\-url>\fR (\f(CW\-r <remote\-url>\fR)" 4
.IX Item "--remote=<remote-url> (-r <remote-url>)"
Use a different remote-url than the one saved in \f(CW\*(C`.gitrepo\*(C'\fR locally.
.ie n .IP """\-\-update"" (""\-u"")" 4
.el .IP "\f(CW\-\-update\fR (\f(CW\-u\fR)" 4
.IX Item "--update (-u)"
If \f(CW\*(C`\-b\*(C'\fR or \f(CW\*(C`\-r\*(C'\fR are used, and the command updates the \f(CW\*(C`.gitrepo\*(C'\fR file,
include these values to the update.
.ie n .IP """\-\-continue""" 4
.el .IP "\f(CW\-\-continue\fR" 4
.IX Item "--continue"
On a pull or push, you often want to do things by hand. This involves a
\&\f(CW\*(C`subrepo checkout\*(C'\fR, merging and testing, etc. When the subrepo branch is
ready to be integrated (pulled) or pushed back upstream, use this flag on the
relevant pull or push command.
.SS "Merge Options"
.IX Subsection "Merge Options"
When doing a \f(CW\*(C`pull\*(C'\fR command (or doing a \f(CW\*(C`checkout\*(C'\fR for manual merge/pull)
you can specify a 'merge strategy' to be tried:
.ie n .IP """\-\-reclone""" 4
.el .IP "\f(CW\-\-reclone\fR" 4
.IX Item "--reclone"
Use this option when you have no local changes to the subrepo, and you simply
want to replace the old content with the new upstream content. If you use \f(CW\*(C`\-\-
branch\*(C'\fR or \f(CW\*(C`\-\-remote\*(C'\fR options with this option, the \f(CW\*(C`\-\-update\*(C'\fR option is
turned on automatically. (new remote and branch are stored in .gitrepo file)
.ie n .IP """\-\-rebase""" 4
.el .IP "\f(CW\-\-rebase\fR" 4
.IX Item "--rebase"
Attempt a rebase on top off the remote head.
.ie n .IP """\-\-merge""" 4
.el .IP "\f(CW\-\-merge\fR" 4
.IX Item "--merge"
Use the default (recursive) merge strategy.
.ie n .IP """\-\-ours""" 4
.el .IP "\f(CW\-\-ours\fR" 4
.IX Item "--ours"
Use recursive + \f(CW\*(C`\-X ours\*(C'\fR option.
.ie n .IP """\-\-theirs""" 4
.el .IP "\f(CW\-\-theirs\fR" 4
.IX Item "--theirs"
Use recursive + \f(CW\*(C`\-X theirs\*(C'\fR option.
.ie n .IP """\-\-graft""" 4
.el .IP "\f(CW\-\-graft\fR" 4
.IX Item "--graft"
This option creates a graft between your local detached subrepo branch and the
fetched upstream branch, so that you can try a hand merge. Some commands like
\&\f(CW\*(C`git rebase\*(C'\fR seem to need this.
.IP "\-\-fetch" 4
.IX Item "--fetch"
When you specify a merge strategy, the command will do a remote fetch
automatically. If no merge strategy option is supplied for a checkout command,
the fetch is not done. This flag says to fetch anyway.
.SH "Commands"
.IX Header "Commands"
.ie n .IP """git subrepo clone <repository> [<subdir>] [\-b <upstream\-branch>]""" 4
.el .IP "\f(CWgit subrepo clone <repository> [<subdir>] [\-b <upstream\-branch>]\fR" 4
.IX Item "git subrepo clone <repository> [<subdir>] [-b <upstream-branch>]"
This command adds a repository as a subrepo in a subdir of your repository. It
is similar in feel to \f(CW\*(C`git clone\*(C'\fR. You just specify the remote repo url, and
optionally a sub-directory and/or branch name. The repo will be fetched and
merged into the subdir. The subrepo history is not added to your repo history,
but a commit is added that contains the reference information. This
information is also stored in a special file called \f(CW\*(C`<subdir>/.gitrepo\*(C'\fR.
The presence of this file indicates that the directory is a subrepo.
.ie n .IP """git subrepo pull <subdir>|\-\-all [\-\-<strategy> | \-\-continue] [\-r <remote>] [\-b <branch>] [\-u]""" 4
.el .IP "\f(CWgit subrepo pull <subdir>|\-\-all [\-\-<strategy> | \-\-continue] [\-r <remote>] [\-b <branch>] [\-u]\fR" 4
.IX Item "git subrepo pull <subdir>|--all [--<strategy> | --continue] [-r <remote>] [-b <branch>] [-u]"
Update the subdir with the latest remote changes. The subdir must be a subrepo
(must contain a .gitrepo file). If you specify a merge-strategy like \f(CW\*(C`\-\-
rebase\*(C'\fR or \f(CW\*(C`\-\-ours\*(C'\fR, the command will attempt to fetch, merge and integrate
all in one step. If you want to merge yourself, run a \f(CW\*(C`git subrepo checkout\*(C'\fR
first, merge yourself, then run \f(CW\*(C`git subrepo pull <subdir> \-\-continue\*(C'\fR
and your branch will be integrated (pulled) into the mainline repo.
.ie n .IP """git subrepo push <subdir>|\-\-all [\-\-continue] [\-r <remote>] [\-b <branch>]""" 4
.el .IP "\f(CWgit subrepo push <subdir>|\-\-all [\-\-continue] [\-r <remote>] [\-b <branch>]\fR" 4
.IX Item "git subrepo push <subdir>|--all [--continue] [-r <remote>] [-b <branch>]"
This command will make sure that you have already pulled (merged) the upstream
head. Then it will create a branch of the local history involving the subrepo,
and push that back to the remote.
.ie n .IP """git subrepo checkout <subdir>|\-\-all [\-\-<strategy> [\-r <remote>] [\-b <branch>]]""" 4
.el .IP "\f(CWgit subrepo checkout <subdir>|\-\-all [\-\-<strategy> [\-r <remote>] [\-b <branch>]]\fR" 4
.IX Item "git subrepo checkout <subdir>|--all [--<strategy> [-r <remote>] [-b <branch>]]"
This command creates a local branch called subrepo/<subrepo>, that contains
all the subdir commits since the last pull. This is useful when a subrepo
pull has failed. You can merge things by hand, then run a 'git subrepo push'
command. If you specify a merge-strategy, then it will be applied using the
remote head (which is automatically fetched) and this new branch. With no merge\-
strategy, just make the branch. After all this, the \f(CW\*(C`checkout\*(C'\fR command will
actually checkout the new branch. This command is normally used for hand
merging, but can also be used to see what the local subrepo changes look
like, by themselves. Note: the \f(CW\*(C`.gitrepo\*(C'\fR file will be deleted in this
subrepo branch.
.ie n .IP """git subrepo status <subdir>|\-\-all [\-\-quiet]""" 4
.el .IP "\f(CWgit subrepo status <subdir>|\-\-all [\-\-quiet]\fR" 4
.IX Item "git subrepo status <subdir>|--all [--quiet]"
Get the status of a subrepo. If \f(CW\*(C`\-\-all\*(C'\fR provided, get the status of all
subrepos. If the \f(CW\*(C`\-\-quiet\*(C'\fR flag is used, print less info, and on 1 line
per subrepo.
.ie n .IP """git subrepo fetch <subdir>|\-\-all""" 4
.el .IP "\f(CWgit subrepo fetch <subdir>|\-\-all\fR" 4
.IX Item "git subrepo fetch <subdir>|--all"
This command will fetch the remote content for a subrepo. It will create a
branch pointing at the \s-1FETCH_HEAD\s0 called \f(CW\*(C`subrepo/remote/<subdir>\*(C'\fR and a
remote called \f(CW\*(C`subrepo/<subdir>\*(C'\fR.
.ie n .IP """git subrepo clean <subdir>|\-\-all""" 4
.el .IP "\f(CWgit subrepo clean <subdir>|\-\-all\fR" 4
.IX Item "git subrepo clean <subdir>|--all"
When you run a subrepo command that does a remote fetch, extra branches,
remotes and grafts are created for you. This command will remove them.
.ie n .IP """git subrepo help""" 4
.el .IP "\f(CWgit subrepo help\fR" 4
.IX Item "git subrepo help"
Same as \f(CW\*(C`git help subrepo\*(C'\fR. Will launch the manpage. For the shorter usage,
use \f(CW\*(C`git subrepo \-h\*(C'\fR.
.ie n .IP """git subrepo version [\-\-verbose] [\-\-quiet]""" 4
.el .IP "\f(CWgit subrepo version [\-\-verbose] [\-\-quiet]\fR" 4
.IX Item "git subrepo version [--verbose] [--quiet]"
This command will display version information about git-subrepo and its
environment. For just the version number, use \f(CW\*(C`git subrepo \-\-version\*(C'\fR. Use
\&\f(CW\*(C`\-\-verbose\*(C'\fR for more version info, and \f(CW\*(C`\-\-quiet\*(C'\fR for less.
.SH "Status"
.IX Header "Status"
The git-subrepo command is coming together nicely, but some details are still
being ironed out. I would not use it for important things yet, but playing
around with it is cheap (this is not \f(CW\*(C`git submodule\*(C'\fR) , and not permanent (if
you do not push to public remotes). ie You can always play around and reset
back to the beginning without pain.
.PP
This command has a test suite (run \f(CW\*(C`make test\*(C'\fR), but surely has many bugs. If
you have expertise with Git and subcommands, please review the code, and file
issues on anything that seems wrong.
.PP
If you want to chat about the \f(CW\*(C`git\-subrepo\*(C'\fR command, join \f(CW\*(C`#git\-commands\*(C'\fR on
\&\f(CW\*(C`irc.freenode.net\*(C'\fR.
.SH "Notes"
.IX Header "Notes"
.IP "\(bu" 4
This command currently only works on \s-1POSIX\s0 systems.
.IP "\(bu" 4
The \f(CW\*(C`git\-subrepo\*(C'\fR repo itself has 2 subrepos under the \f(CW\*(C`ext/\*(C'\fR subdirectory.
.IP "\(bu" 4
Written in (very modern) Bash, with full test suite. Take a look.
.SH "Author"
.IX Header "Author"
Written by Ingy döt Net <ingy@ingy.net>
.SH "License and Copyright"
.IX Header "License and Copyright"
The \s-1MIT\s0 License (\s-1MIT\s0)
.PP
Copyright (c) 2013\-2014 Ingy döt Net
