.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "\&\fIgit\-subrepo\fR\|(1) 1"
.TH \&\fIgit\-subrepo\fR\|(1) 1 "November 2015" "Generated by Swim v0.1.41" "Git Submodule Alternative"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Name"
.IX Header "Name"
\&\fIgit\-subrepo\fR\|(1) \- Git Submodule Alternative
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 1
\&    git subrepo \-h    # Help Overview
\&
\&    git subrepo clone <remote\-url> [<subdir>]
\&    git subrepo init <subdir>
\&    git subrepo pull <subdir>
\&    git subrepo push <subdir>
\&
\&    git subrepo fetch <subdir>
\&    git subrepo branch <subdir>
\&    git subrepo commit <subdir>
\&    git subrepo merge\-base <branch1> <branch2>
\&
\&    git subrepo status [<subdir>]
\&    git subrepo clean <subdir>
\&
\&    git subrepo help [<command>]
\&    git subrepo version
.Ve
.SH "Description"
.IX Header "Description"
This git command \*(L"clones\*(R" an external git repo into a subdirectory of your
repo. Later on, upstream changes can be pulled in, and local changes can be
pushed back. Simple.
.SH "Benefits"
.IX Header "Benefits"
This command is an improvement from \f(CW\*(C`git\-submodule\*(C'\fR and \f(CW\*(C`git\-subtree\*(C'\fR; two
other git commands with similar goals, but various problems.
.PP
It assumes there are 3 main roles of people interacting with a repo, and
attempts to serve them all well:
.IP "\(bu" 4
\&\fBowner\fR \- The person who authors/owns/maintains a repo.
.IP "\(bu" 4
\&\fBusers\fR \- People who are just using/installing the repo.
.IP "\(bu" 4
\&\fBcollaborators\fR \- People who commit code to the repo and subrepos.
.PP
The \f(CW\*(C`git\-subrepo\*(C'\fR command benefits these roles in the following ways:
.IP "\(bu" 4
Simple and intuitive commandline usage.
.IP "\(bu" 4
Users get your repo and all your subrepos just by cloning your repo.
.IP "\(bu" 4
Users do not need to install \f(CW\*(C`git\-subrepo\*(C'\fR, ever.
.IP "\(bu" 4
Collaborators do not need to install unless they want to push/pull.
.IP "\(bu" 4
Collaborators know when a subdir is a subrepo (it has a \f(CW\*(C`.gitrepo\*(C'\fR file).
.IP "\(bu" 4
Well named branches and remotes are generated for manual operations.
.IP "\(bu" 4
Owners do not deal with the complications of keeping submodules in sync.
.IP "\(bu" 4
Subrepo repositories can contain subrepos themselves.
.IP "\(bu" 4
Branching with subrepos JustWorks™.
.IP "\(bu" 4
Different branches can have different subrepos in different states, etc.
.IP "\(bu" 4
Moving/renaming/deleting a subrepo subdir JustWorks™.
.IP "\(bu" 4
You can \f(CW\*(C`init\*(C'\fR an existing subdirectory into a subrepo.
.IP "\(bu" 4
Your git history is kept squeaky clean.
.IP "\(bu" 4
Upstream history (clone/pull) is condensed into a single commit.
.IP "\(bu" 4
You can see the subrepo history with \f(CW\*(C`git log subrepo/<subdir>/upstream\*(C'\fR.
.IP "\(bu" 4
Commits pushed back upstream are \fBnot\fR condensed.
.IP "\(bu" 4
Trivial to try any subrepo operations and then reset back.
.IP "\(bu" 4
No configuration required.
.IP "\(bu" 4
Does not introduce history that messes up other git commands.
.IP "\(bu" 4
Fixes known rebase failures with \f(CW\*(C`git\-subtree\*(C'\fR.
.SH "Installation"
.IX Header "Installation"
The best short answer is:
.PP
.Vb 2
\&    git clone https://github.com/ingydotnet/git\-subrepo /path/to/git\-subrepo
\&    echo \*(Aqsource /path/to/git\-subrepo/init\*(Aq >> ~/.bashrc
.Ve
.PP
The complete \*(L"Installation Instructions\*(R" can be found below.
.SH "Commands"
.IX Header "Commands"
All the \fBsubrepo\fR commands use names of actual Git commands and try to do
operations that are similar to their Git counterparts. They also attempt to
give similar output in an attempt to make the subrepo usage intuitive to
experienced Git users.
.PP
Please note that the commands are \fInot\fR exact equivalents, and do not take
all the same arguments. Keep reading…
.ie n .IP """git subrepo clone <repository> [<subdir>] [\-b <upstream\-branch>] [\-f]""" 4
.el .IP "\f(CWgit subrepo clone <repository> [<subdir>] [\-b <upstream\-branch>] [\-f]\fR" 4
.IX Item "git subrepo clone <repository> [<subdir>] [-b <upstream-branch>] [-f]"
Add a repository as a subrepo in a subdir of your repository.
.Sp
This is similar in feel to \f(CW\*(C`git clone\*(C'\fR. You just specify the remote repo url,
and optionally a sub-directory and/or branch name. The repo will be fetched
and merged into the subdir.
.Sp
The subrepo history is \fIsquashed\fR into a single commit that contains the
reference information. This information is also stored in a special file
called \f(CW\*(C`<subdir>/.gitrepo\*(C'\fR. The presence of this file indicates that the
directory is a subrepo.
.Sp
All subsequent commands refer to the subrepo by the name of the
\&\fIsubdir\fR. From the subdir, all the current information about the subrepo
can be obtained.
.Sp
The \f(CW\*(C`\-\-force\*(C'\fR option will \*(L"reclone\*(R" (completely replace) an existing subdir.
.Sp
The \f(CW\*(C`clone\*(C'\fR command accepts the \f(CW\*(C`\-\-branch=\*(C'\fR and \f(CW\*(C`\-\-force\*(C'\fR options.
.ie n .IP """git subrepo init <subdir> [\-r <remote>] [\-b <branch>]""" 4
.el .IP "\f(CWgit subrepo init <subdir> [\-r <remote>] [\-b <branch>]\fR" 4
.IX Item "git subrepo init <subdir> [-r <remote>] [-b <branch>]"
Turn an existing subdirectory into a subrepo.
.Sp
If you want to expose a subdirectory of your project as a published subrepo,
this command will do that. It will split out the content of a normal
subdirectory into a branch and start tracking it as a subrepo. Afterwards your
original repo will look exactly the same except that there will be a \f(CW\*(C`<subdir>/.gitrepo\*(C'\fR file.
.Sp
If you specify the \f(CW\*(C`\-\-remote\*(C'\fR (and optionally the \f(CW\*(C`\-\-branch\*(C'\fR) option, the
values will be added to the \f(CW\*(C`<subdir>/.gitrepo\*(C'\fR file. The \f(CW\*(C`\-\-remote\*(C'\fR
option is the upstream \s-1URL,\s0 and the \f(CW\*(C`\-\-branch\*(C'\fR option is the upstream branch
to push to. These values will be needed to do a \f(CW\*(C`git subrepo push\*(C'\fR command,
but they can be provided later on the \f(CW\*(C`push\*(C'\fR command (and saved to \f(CW\*(C`<subdir>/.gitrepo\*(C'\fR if you also specify the \f(CW\*(C`\-\-update\*(C'\fR option).
.Sp
Note: You will need to create the empty upstream repo and push to it on your
      own, using \f(CW\*(C`git subrepo push <subdir>\*(C'\fR.
.Sp
The \f(CW\*(C`init\*(C'\fR command accepts the \f(CW\*(C`\-\-branch=\*(C'\fR and \f(CW\*(C`\-\-remote=\*(C'\fR options.
.ie n .IP """git subrepo pull <subdir>|\-\-all [\-b <branch>] [\-r <remote>] [\-u]""" 4
.el .IP "\f(CWgit subrepo pull <subdir>|\-\-all [\-b <branch>] [\-r <remote>] [\-u]\fR" 4
.IX Item "git subrepo pull <subdir>|--all [-b <branch>] [-r <remote>] [-u]"
Update the subrepo subdir with the latest upstream changes.
.Sp
The \f(CW\*(C`pull\*(C'\fR command will attempt to do the following commands in one go:
.Sp
.Vb 7
\&    git subrepo fetch <subdir>
\&    git subrepo branch <subdir>
\&    git subrepo merge\-base subrepo/<subdir>/upstream subrepo/<subdir>
\&    git rebase \-\-onto <new_parent> <old_parent> subrepo/<subdir>
\&    git rebase subrepo/<subdir>/upstream subrepo/<subdir>
\&    git checkout ORIG_HEAD
\&    git subrepo commit <subdir>
.Ve
.Sp
In other words, you could do all the above commands yourself, for the same
effect. If any of the commands fail, subrepo will stop and tell you to finish
this by hand. Generally a failure would be in the rebase, where conflicts can
happen. Since Git has lots of ways to resolve conflicts to your personal
tastes, the subrepo command defers to letting you do this by hand.
.Sp
Like the \f(CW\*(C`clone\*(C'\fR command, \f(CW\*(C`pull\*(C'\fR will squash all the changes (since the last
pull or clone) into one commit. This keeps your mainline history nice and
clean. You can easily see the subrepo's history with the \f(CW\*(C`git log\*(C'\fR command:
.Sp
.Vb 1
\&    git log refs/subrepo/<subdir>/upstream
.Ve
.Sp
The set of commands used above are described in detail below.
.Sp
The \f(CW\*(C`pull\*(C'\fR command accepts the \f(CW\*(C`\-\-all\*(C'\fR, \f(CW\*(C`\-\-branch=\*(C'\fR, \f(CW\*(C`\-\-remote=\*(C'\fR and \f(CW\*(C`\-\-
update\*(C'\fR options.
.ie n .IP """git subrepo push <subdir>|\-\-all [<branch>] [\-r <remote>] [\-b <branch>] [\-u]""" 4
.el .IP "\f(CWgit subrepo push <subdir>|\-\-all [<branch>] [\-r <remote>] [\-b <branch>] [\-u]\fR" 4
.IX Item "git subrepo push <subdir>|--all [<branch>] [-r <remote>] [-b <branch>] [-u]"
Push a properly merged subrepo branch back upstream.
.Sp
The \f(CW\*(C`push\*(C'\fR command requires a branch that has been properly merged/rebased
with the upstream \s-1HEAD \s0(unless the upstream \s-1HEAD\s0 is empty, which is common
when doing a first \f(CW\*(C`push\*(C'\fR after an \f(CW\*(C`init\*(C'\fR). That means the upstream \s-1HEAD\s0 is
one of the commits in the branch. If you don't specify a branch to push, one
will be created for you using the same techniques as a pull (except it won't
be committed locally). Otherwise you can name a properly merged branch to
push. Often times you can use the branch commit from the last pull, which is
saved as \f(CW\*(C`refs/subrepo/<subdir>/pull\*(C'\fR.
.Sp
After that, the \f(CW\*(C`push\*(C'\fR command just checks that the branch contains the
upstream \s-1HEAD\s0 and then pushes it upstream.
.Sp
The \f(CW\*(C`\-\-force\*(C'\fR option will do a force push. Force pushes are typically
discouraged. Only use this option if you fully understand it. (The \f(CW\*(C`\-\-force\*(C'\fR
option will \s-1NOT\s0 check for a proper merge. \s-1ANY\s0 branch will be force pushed!)
.Sp
The \f(CW\*(C`push\*(C'\fR command accepts the \f(CW\*(C`\-\-all\*(C'\fR, \f(CW\*(C`\-\-branch=\*(C'\fR, \f(CW\*(C`\-\-force\*(C'\fR, \f(CW\*(C`\-\-
remote=\*(C'\fR and \f(CW\*(C`\-\-update\*(C'\fR options.
.ie n .IP """git subrepo fetch <subdir>|\-\-all""" 4
.el .IP "\f(CWgit subrepo fetch <subdir>|\-\-all\fR" 4
.IX Item "git subrepo fetch <subdir>|--all"
Fetch the remote/upstream content for a subrepo.
.Sp
It will create a Git reference called \f(CW\*(C`subrepo/<subdir>/upstream\*(C'\fR that
points at the same commit as \f(CW\*(C`FETCH_HEAD\*(C'\fR. It will also create a remote
called \f(CW\*(C`subrepo/<subdir>\*(C'\fR. These are temporary and you can remove them
easily with the subrepo \f(CW\*(C`clean\*(C'\fR command.
.Sp
The \f(CW\*(C`fetch\*(C'\fR command accepts the \f(CW\*(C`\-\-all\*(C'\fR, \f(CW\*(C`\-\-branch=\*(C'\fR and \f(CW\*(C`\-\-
remote=\*(C'\fR options.
.ie n .IP """git subrepo branch <subdir>|\-\-all""" 4
.el .IP "\f(CWgit subrepo branch <subdir>|\-\-all\fR" 4
.IX Item "git subrepo branch <subdir>|--all"
Create a branch with local subrepo commits.
.Sp
Scan the history of the mainline for all the commits that affect the \f(CW\*(C`subdir\*(C'\fR
and create a new branch from them called \f(CW\*(C`subrepo/<subdir>\*(C'\fR.
.Sp
This is useful for doing \f(CW\*(C`pull\*(C'\fR and \f(CW\*(C`push\*(C'\fR commands by hand.
.Sp
Use the \f(CW\*(C`\-\-force\*(C'\fR option to write over an existing \f(CW\*(C`subrepo/<subdir>\*(C'\fR branch.
.Sp
The \f(CW\*(C`branch\*(C'\fR command accepts the \f(CW\*(C`\-\-all\*(C'\fR and \f(CW\*(C`\-\-force\*(C'\fR options.
.ie n .IP """git subrepo commit <subdir> [<subrepo\-ref>]""" 4
.el .IP "\f(CWgit subrepo commit <subdir> [<subrepo\-ref>]\fR" 4
.IX Item "git subrepo commit <subdir> [<subrepo-ref>]"
Add subrepo branch to current history as a single commit.
.Sp
This command is generally used after a hand-merge. You have done a \f(CW\*(C`subrepo
branch\*(C'\fR and merged (rebased) it with the upstream. This command takes the \s-1HEAD\s0
of that branch, puts its content into the subrepo subdir and adds a new commit
for it to the top of your mainline history.
.Sp
This command requires that the upstream \s-1HEAD\s0 be in the \f(CW\*(C`subrepo/<subdir>\*(C'\fR
branch history. That way the same branch can push upstream. Use the \f(CW\*(C`\-\-force\*(C'\fR
option to commit anyway.
.Sp
The \f(CW\*(C`commit\*(C'\fR command accepts the \f(CW\*(C`\-\-force\*(C'\fR option.
.ie n .IP """git subrepo merge\-base <branch1> <branch2>""" 4
.el .IP "\f(CWgit subrepo merge\-base <branch1> <branch2>\fR" 4
.IX Item "git subrepo merge-base <branch1> <branch2>"
Find a common ancestor between two branches. This command will look at the
referenced tree hash in the commits to see if it can locate a common one.
.Sp
This is used for pull and push before the rebase step. In this case we look at
all the local commits and then try to find a tree hash that is available in
the subrepo.
.Sp
Note: This is different from the regular merge-base that looks at the object
      structure.
.ie n .IP """git subrepo status [<subdir>]""" 4
.el .IP "\f(CWgit subrepo status [<subdir>]\fR" 4
.IX Item "git subrepo status [<subdir>]"
Get the status of a subrepo. Show the status of all subrepos by default. If
the \f(CW\*(C`\-\-quiet\*(C'\fR flag is used, just print the subrepo names, one per line.
.Sp
The \f(CW\*(C`\-\-verbose\*(C'\fR option will show all the recent local and upstream commits.
.Sp
The \f(CW\*(C`status\*(C'\fR command accepts the \f(CW\*(C`\-\-fetch\*(C'\fR option.
.ie n .IP """git subrepo clean <subdir>|\-\-all""" 4
.el .IP "\f(CWgit subrepo clean <subdir>|\-\-all\fR" 4
.IX Item "git subrepo clean <subdir>|--all"
Remove artifacts created by \f(CW\*(C`fetch\*(C'\fR and \f(CW\*(C`branch\*(C'\fR commands.
.Sp
The \f(CW\*(C`fetch\*(C'\fR and \f(CW\*(C`branch\*(C'\fR operations (and other commands that call them)
create temporary things like refs, branches and remotes. This command removes
all those things.
.Sp
Use \f(CW\*(C`\-\-force\*(C'\fR to remove refs. Refs are not removed by default because they
are sometimes needed between commands. To remove all subrepo artifacts:
.Sp
.Vb 1
\&    git subrepo clean \-\-all \-\-force
.Ve
.Sp
The \f(CW\*(C`clean\*(C'\fR command takes the \f(CW\*(C`\-\-all\*(C'\fR and \f(CW\*(C`\-\-force\*(C'\fR options.
.ie n .IP """git subrepo help""" 4
.el .IP "\f(CWgit subrepo help\fR" 4
.IX Item "git subrepo help"
Same as \f(CW\*(C`git help subrepo\*(C'\fR. Will launch the manpage. For the shorter usage,
use \f(CW\*(C`git subrepo \-h\*(C'\fR.
.ie n .IP """git subrepo version [\-\-verbose] [\-\-quiet]""" 4
.el .IP "\f(CWgit subrepo version [\-\-verbose] [\-\-quiet]\fR" 4
.IX Item "git subrepo version [--verbose] [--quiet]"
This command will display version information about git-subrepo and its
environment. For just the version number, use \f(CW\*(C`git subrepo \-\-version\*(C'\fR. Use
\&\f(CW\*(C`\-\-verbose\*(C'\fR for more version info, and \f(CW\*(C`\-\-quiet\*(C'\fR for less.
.SH "Command Options"
.IX Header "Command Options"
.ie n .IP """\-h""" 4
.el .IP "\f(CW\-h\fR" 4
.IX Item "-h"
Show a brief view of the commands and options.
.ie n .IP """\-\-help""" 4
.el .IP "\f(CW\-\-help\fR" 4
.IX Item "--help"
Gives an overview of the help options available for the subrepo command.
.ie n .IP """\-\-version""" 4
.el .IP "\f(CW\-\-version\fR" 4
.IX Item "--version"
Print the git-subrepo version. Just the version number. Try the \f(CW\*(C`version\*(C'\fR
command for more version info.
.ie n .IP """\-\-all"" (""\-a"")" 4
.el .IP "\f(CW\-\-all\fR (\f(CW\-a\fR)" 4
.IX Item "--all (-a)"
If you have multiple subrepos, issue the command to all of them (if
applicable).
.ie n .IP """\-\-branch=<branch\-name>"" (""\-b <branch\-name>"")" 4
.el .IP "\f(CW\-\-branch=<branch\-name>\fR (\f(CW\-b <branch\-name>\fR)" 4
.IX Item "--branch=<branch-name> (-b <branch-name>)"
Use a different branch-name than the remote \s-1HEAD\s0 or the one saved in
\&\f(CW\*(C`.gitrepo\*(C'\fR locally.
.ie n .IP """\-\-force"" (""\-f"")" 4
.el .IP "\f(CW\-\-force\fR (\f(CW\-f\fR)" 4
.IX Item "--force (-f)"
Use this option to force certain commands that fail in the general case.
.ie n .IP """\-\-fetch"" (""\-F"")" 4
.el .IP "\f(CW\-\-fetch\fR (\f(CW\-F\fR)" 4
.IX Item "--fetch (-F)"
Use this option to fetch the upstream commits, before running the command.
.ie n .IP """\-\-remote=<remote\-url>"" (""\-r <remote\-url>"")" 4
.el .IP "\f(CW\-\-remote=<remote\-url>\fR (\f(CW\-r <remote\-url>\fR)" 4
.IX Item "--remote=<remote-url> (-r <remote-url>)"
Use a different remote-url than the one saved in \f(CW\*(C`.gitrepo\*(C'\fR locally.
.ie n .IP """\-\-update"" (""\-u"")" 4
.el .IP "\f(CW\-\-update\fR (\f(CW\-u\fR)" 4
.IX Item "--update (-u)"
If \f(CW\*(C`\-b\*(C'\fR or \f(CW\*(C`\-r\*(C'\fR are used, and the command updates the \f(CW\*(C`.gitrepo\*(C'\fR file,
include these values to the update.
.SH "Output Options"
.IX Header "Output Options"
.ie n .IP """\-\-quiet"" (""\-q"")" 4
.el .IP "\f(CW\-\-quiet\fR (\f(CW\-q\fR)" 4
.IX Item "--quiet (-q)"
Print as little info as possible. Applicable to most commands.
.ie n .IP """\-\-verbose"" (""\-v"")" 4
.el .IP "\f(CW\-\-verbose\fR (\f(CW\-v\fR)" 4
.IX Item "--verbose (-v)"
Print more information about the command execution and results. Applicable to
most commands.
.ie n .IP """\-\-debug"" (""\-d"")" 4
.el .IP "\f(CW\-\-debug\fR (\f(CW\-d\fR)" 4
.IX Item "--debug (-d)"
Show the actual git (and other) commands being executed under the hood.
Applicable to most commands.
.ie n .IP """\-\-DEBUG"" (""\-x"")" 4
.el .IP "\f(CW\-\-DEBUG\fR (\f(CW\-x\fR)" 4
.IX Item "--DEBUG (-x)"
Use the Bash \f(CW\*(C`set \-x\*(C'\fR option which prints every command before it is
run. \s-1VERY\s0 noisy, but extremely useful in deep debugging. Applicable to
all commands.
.SH "Installation Instructions"
.IX Header "Installation Instructions"
There are currently 3 ways to install \f(CW\*(C`git\-subrepo\*(C'\fR. For all of them you need
to get the source code from GitHub:
.PP
.Vb 1
\&    git clone https://github.com/ingydotnet/git\-subrepo /path/to/git\-subrepo
.Ve
.PP
The first installation method is preferred: \f(CW\*(C`source\*(C'\fR the \f(CW\*(C`init\*(C'\fR file. Just
add a line like this one to your shell startup script:
.PP
.Vb 1
\&    source /path/to/git\-subrepo/init
.Ve
.PP
That will modify your \f(CW\*(C`PATH\*(C'\fR and \f(CW\*(C`MANPATH\*(C'\fR, and also enable command
completion.
.PP
The second method is to do these things by hand. This might afford you more
control of your shell environment. Simply add the \f(CW\*(C`lib\*(C'\fR and \f(CW\*(C`man\*(C'\fR
directories to your \f(CW\*(C`PATH\*(C'\fR and \f(CW\*(C`MANPATH\*(C'\fR:
.PP
.Vb 2
\&    export PATH="/path/to/git\-subrepo/lib:$PATH"
\&    export MANPATH="/path/to/git\-subrepo/man:$MANPATH"
.Ve
.PP
See below for info on how to turn on Command Completion.
.PP
The third method is a standard system install, which puts \f(CW\*(C`git\-subrepo\*(C'\fR next
to your other git commands:
.PP
.Vb 1
\&    make install        # Possibly with \*(Aqsudo\*(Aq
.Ve
.PP
This method does not account for upgrading and command completion yet.
.SH "Upgrading"
.IX Header "Upgrading"
If you used the \f(CW\*(C`PATH\*(C'\fR method of installation, just run this to upgrade
\&\f(CW\*(C`git\-subrepo\*(C'\fR:
.PP
.Vb 1
\&    git subrepo upgrade
.Ve
.PP
Or (same thing):
.PP
.Vb 2
\&    cd /path/to/git\-subrepo
\&    git pull
.Ve
.PP
If you used \f(CW\*(C`make install\*(C'\fR method, then run this again (after \f(CW\*(C`git pull\*(C'\fR):
.PP
.Vb 1
\&    make install        # Possibly with \*(Aqsudo\*(Aq
.Ve
.SH "Command Completion"
.IX Header "Command Completion"
The \f(CW\*(C`git subrepo\*(C'\fR command supports \f(CW\*(C`<TAB>\*(C'\fR\-based command completion. If
you don't use the \f(CW\*(C`init\*(C'\fR script (see Installation, above), you'll need to
enable this manually to use it.
.SS "In Bash"
.IX Subsection "In Bash"
If your Bash setup does not already provide command completion for Git, you'll
need to enable that first:
.PP
.Vb 1
\&    source <Git completion script>
.Ve
.PP
On your system, the Git completion script might be found at any of the
following locations (or somewhere else that we don't know about):
.IP "\(bu" 4
\&\f(CW\*(C`/etc/bash_completion.d/git\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`/usr/share/bash\-completion/git\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`/usr/share/bash\-completion/completions/git\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`/opt/local/share/bash\-completion/completions/git\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`/usr/local/etc/bash_completion.d/git\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`~/.homebrew/etc/bash_completion.d/git\*(C'\fR
.PP
In case you can't find any of these, this repository contains a copy of the
Git completion script:
.PP
.Vb 1
\&    source /path/to/git\-subrepo/share/git\-completion.bash
.Ve
.PP
Once Git completion is enabled (whether you needed to do that manually or
not), you can turn on \f(CW\*(C`git\-subrepo\*(C'\fR completion with a command like this:
.PP
.Vb 1
\&    source /path/to/git\-subrepo/share/completion.bash
.Ve
.SS "In zsh"
.IX Subsection "In zsh"
In the Z shell (zsh), you can manually enable \f(CW\*(C`git\-subrepo\*(C'\fR completion by
adding the following line to your \f(CW\*(C`~/.zshrc\*(C'\fR, \fBbefore\fR the \f(CW\*(C`compinit\*(C'\fR
function is called:
.PP
.Vb 1
\&    fpath=(\*(Aq/path/to/git\-subrepo/share/zsh\-completion\*(Aq $fpath)
.Ve
.SH "Status"
.IX Header "Status"
The git-subrepo command has been in use for well over a year and seems to get
the job done. Development is still ongoing but mostly just for fixing bugs.
.PP
Trying subrepo out is simple and painless (this is not \f(CW\*(C`git submodule\*(C'\fR).
Nothing is permanent (if you do not push to shared remotes). ie You can always
play around and reset back to the beginning without pain.
.PP
This command has a test suite (run \f(CW\*(C`make test\*(C'\fR), but surely has many bugs. If
you have expertise with Git and subcommands, please review the code, and file
issues on anything that seems wrong.
.PP
If you want to chat about the \f(CW\*(C`git\-subrepo\*(C'\fR command, join \f(CW\*(C`#git\-commands\*(C'\fR on
\&\f(CW\*(C`irc.freenode.net\*(C'\fR.
.SH "Notes"
.IX Header "Notes"
.IP "\(bu" 4
This command currently only works on \s-1POSIX\s0 systems.
.RS 4
.IP "\(bu" 4
Windows support via msysgit is being looked into (works on cygwin).
.RE
.RS 4
.RE
.IP "\(bu" 4
The \f(CW\*(C`git\-subrepo\*(C'\fR repo itself has 2 subrepos under the \f(CW\*(C`ext/\*(C'\fR subdirectory.
.IP "\(bu" 4
Written in (very modern) Bash, with full test suite. Take a look.
.IP "\(bu" 4
A \f(CW\*(C`.gitrepo\*(C'\fR file never is in the top level dir (next to a \f(CW\*(C`.git/\*(C'\fR dir).
.SH "Author"
.IX Header "Author"
Written by Ingy döt Net <ingy@ingy.net>
.SH "License and Copyright"
.IX Header "License and Copyright"
The \s-1MIT\s0 License (\s-1MIT\s0)
.PP
Copyright (c) 2013\-2015 Ingy döt Net
